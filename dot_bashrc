#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Aliases
# *** Default Linux Commands ***
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias l='ls -lh'      # Human-readable long listing format
alias la='ls -lah'    # Same as 'l' but display hidden files
alias len='less -N'   # 'less' with number lines
alias tarc='tar czvf' # Create an archive (tarc <archive name> <filelist>)
alias tarx='tar xzvf' # Extract an archive (tarx <archive name>)
alias tart='tar -tzf' # List the contens of a .tar.gz or .tgz file

# *** SSH Logins ***
alias elec='ssh alexander.carbajal@elec.tricity.wsu.edu'
alias pleiades='ssh alexander.carbajal@pleiades.tricity.wsu.edu'
alias vcluster='ssh alexander.carbajal@vcluster.tricities.wsu.edu'

# *** eza: All of the aliases display icons automatically and display entries as hyperlinks, making them clickable.
# Long views show the Git status for files and directories and a custom time style (mm-dd-yy hh:mm) (24-hour clock). ***
# Display extended details, group owner, and number of hard links
alias e='eza --icons=auto --hyperlink -lgH --git --git-repos --time-style='\''+%m-%d-%y %H:%M'\'''
# Display extended details, group owner, number of hard links, and hidden (dot) files
alias ea='eza --icons=auto --hyperlink -a -lgH --git --git-repos --time-style='\''+%m-%d-%y %H:%M'\'''
# Display entries as a grid
alias eg='eza --icons=auto --hyperlink'
# Display entries as a grid and hidden (dot) files
alias ega='eza --icons=auto --hyperlink -a'

# *** bat ***
alias b='bat'

# *** Git ***
alias glg='git lg' # 'lg' is a heavily customized 'log' alias in a '.gitconfig' file
alias gst='git status'
alias ga='git add .'                     # Add all changes to the commit
alias gr='git remote'                    # List remote repositories
alias gb='git branch'                    # List branches
alias grts='git restore --staged .'      # Unstage all staged files
alias gm='git commit -m'                 # Add a commit with a message
alias gma='git commit --amend --no-edit' # Update the most recent commit without changing the commit message
alias gp='git push'                      # Push to remote
alias gpf='git push -f'                  # Force push to remote

# *** pacman (Arch Linux) ***
alias pmu="sudo pacman -Syu"                       # Fully update an Arch Linux system
alias pms="sudo pacman -S"                         # Install an Arch Linux package
alias pmr="sudo pacman -Rs"                        # Remove an Arch Linux package and its unneeded dependencies
alias pmc="sudo pacman -Qdtq | sudo pacman -Rns -" # Remove unused packages (orphans)

# *** makepkg (Arch Linux) ***
# Build the package, install needed dependencies, install the package file, and clean up leftover files/directories
alias mpkg='makepkg -sic'

# *** Reflector (Arch Linux) ***
# Sort the five most recetly synchronized https pacman mirrors by download speed and overwrite the local mirrorlist
alias reflec='sudo reflector --latest 5 --sort rate --protocol https --save /etc/pacman.d/mirrorlist'

# *** yt-dlp ***
alias ytd='yt-dlp --cookies-from-browser firefox'
alias ytd-dt='yt-dlp --cookies-from-browser firefox --write-description --write-thumbnail'
# Download as an audio file ONLY that contains embedded metadata and an embedded thumbnail
alias ytd-a='yt-dlp --cookies-from-browser firefox -x --embed-metadata --embed-thumbnail'
# Same as 'ytd-a' but with the description and thumbnail also downloaded as separate files
alias ytd-adt='yt-dlp --cookies-from-browser firefox -x --embed-metadata --embed-thumbnail --write-description --write-thumbnail'

# *** gallery-dl ***
alias gld='gallery-dl -D . --cookies-from-browser firefox' # Download to the current directory
# Same as 'gld' but additionally download metadata
alias gldm='gallery-dl -D . --write-metadata --cookies-from-browser firefox'

# *** kitty ***
# Install kitty (if not installed), otherwise update kitty to the latest version
alias kup='curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin'
alias icat="kitten icat"  # Display images in the terminal
alias kdiff="kitten diff" # Fast side-by-side diff tool w/ syntax highlighting & images

# *** fastfetch ***
alias ff='fastfetch'

# *** ouch ***
alias ouchc='ouch compress'   # Compress files (ouchc <input files> <output file>)
alias ouchd='ouch decompress' # Decompress files (ouchd <compressed file>)
alias ouchl='ouch list -t'    # List contents of an archive in tree format (ouchl <compressed file>)

# *** chezmoi ***
alias chc='z ~/.local/share/chezmoi' # Move to the source directory (uses zoxide)
alias cha='chezmoi add'              # Add a file, directory, or symlink to the source state
alias chr='chezmoi re-add'           # Re-add modified files
alias chd='chezmoi diff'             # Print diff between the target and destination state
alias chu='chezmoi update'           # Pull and apply any changes

# *** trash-cli ***
alias trp='trash-put'     # Trash files and directories
alias tre='trash-empty'   # Empty the trashcan(s)
alias trl='trash-list'    # List trashed files
alias trr='trash-restore' # Restore a trashed file
alias trrm='trash-rm'     # Remove individual files from the trashcan

# *** MPI ***
# Compile a C MPI file w/ debugging information, all warnings on, and a specified
# executable filename
alias mpic='mpicc -g -Wall -o'

PS1='[\u@\h \W]\$ '

# Environment variables
export EDITOR="nvim"
# export PAGER="bat"
export PATH="${PATH}:~/scripts"
export PATH="${PATH}:~/.local/bin"

# Yazi shell wrapper to change the cwd when exiting yazi (use yy instead of yazi to start)
function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

# *** Git ***

# Add all changes to a commit and add a commit with a message
# Usage: gam "commit message"
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga' and 'gm'
gam() {
    ga && gm "$1"
}

# Add all changes to a commit, add a commit with a message, and push to remote
# Usage: gamp "commit message"
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga', 'gm', and 'gp'
gamp() {
    gam "$@" && gp
}

# Add all changes to a commit and update the most recent commit without changing its message
# Usage: gama
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga' and 'gma'
gama() {
    ga && gma
}

# Add all changes to a commit, update the most recent commit without changing its message, and force push to remote
# Usage: gamap
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga', 'gma', and 'gpf'
gamap() {
    gama && gpf
}

# *** pacman (Arch Linux) ***

# NOTE: 'pmq' and 'pmqe' use ripgrep (rg)
# View an installed package
# Usage: pmq package
pmq() {
    pacman -Q | rg "$1"
}

# View an explicitly installed package
# Usage: pmqe package
pmqe() {
    pacman -Qe | rg "$1"
}

# *** arch-wiki-lite & arch-wiki-docs: Search the entire Arch Wiki offline ***
# Usage: aw entry
aw() {
    wiki-search-html "$1"
    # NOTE: 'wiki-search entry' displays the selected entry in the terminal, but it doesn't work well
}

# *** scp: OpenSSH secure file copy ***

# Copy a file to Pleiades (cpts411)
# Usage: scp-p file
scp-p() {
    scp "$1" alexander.carbajal@pleiades.tricity.wsu.edu:/home/alexander.carbajal/cpts411
}

# Copy files recursively to Pleiades (cpts411)
# Usage: scp-pr directory
scp-pr() {
    scp -r "$1" alexander.carbajal@pleiades.tricity.wsu.edu:/home/alexander.carbajal/cpts411
}

# Copy a file in Pleiades to the current working directory in the local machine (cpts411)
# Usage: scp-pl file
scp-pl() {
    scp alexander.carbajal@pleiades.tricity.wsu.edu:/home/alexander.carbajal/cpts411/"$1" .
}

# Copy files recursively in Pleiades to the current working directory in the local machine (cpts411)
# Usage: scp-plr directory
scp-plr() {
    scp -r alexander.carbajal@pleiades.tricity.wsu.edu:/home/alexander.carbajal/cpts411/"$1" .
}

# Copy a file to VCluster (cpts411)
# Usage: scp-v file
scp-v() {
    scp "$1" alexander.carbajal@vcluster.tricities.wsu.edu:/home/alexander.carbajal/cpts411
}

# Copy files recursively to VCluster (cpts411)
# Usage: scp-vr directory
scp-vr() {
    scp -r "$1" alexander.carbajal@vcluster.tricities.wsu.edu:/home/alexander.carbajal/cpts411
}

# Copy a file in VCluster to the current working directory in the local machine (cpts411)
# Usage: scp-vl file
scp-vl() {
    scp alexander.carbajal@vcluster.tricities.wsu.edu:/home/alexander.carbajal/cpts411/"$1" .
}

# Copy files recursively in VCluster to the current working directory in the local machine (cpts411)
# Usage: scp-vlr directory
scp-vlr() {
    scp -r alexander.carbajal@vcluster.tricities.wsu.edu:/home/alexander.carbajal/cpts411/"$1" .
}

# *** base64 ***
# Decode base64 data and output the result to the terminal
# Usage: b64 base64string
b64() {
    base64 -d <<<"$1" && echo
}

# *** base32 ***
# Decode base32 data and output the result to the terminal
# Usage: b32 base32string
b32() {
    base32 -d <<<"$1" && echo
}

# Allow zoxide usage (KEEP AT THE END OF THIS CONFIG FILE)
eval "$(zoxide init bash)"
# Allow starship usage (KEEP AT THE END OF THIS CONFIG FILE)
eval "$(starship init bash)"
