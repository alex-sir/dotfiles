#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Aliases
# *** Default Linux Commands ***
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias l='ls -lh'                      # Human-readable long listing format
alias la='ls -lah'                    # Same as 'l' but display hidden files
alias len='less -N'                   # 'less' with number lines
alias tarc='tar czvf'                 # Create an archive (tarc <archive name> <filelist>)
alias tarx='tar xzvf'                 # Extract an archive (tarx <archive name>)
alias tart='tar -tzf'                 # List the contents of a .tar.gz or .tgz file
alias cl='clear'                      # Clear the terminal
alias PATH='echo $PATH | tr ":" "\n"' # Display $PATH as one directory per line

# *** SSH Logins ***
alias elec='ssh alexander.carbajal@elec.tricity.wsu.edu'
alias pleiades='ssh alexander.carbajal@pleiades.tricity.wsu.edu'
alias vcluster='ssh alexander.carbajal@vcluster.tricities.wsu.edu'

# *** eza: All of the aliases display icons automatically, list directories before other files, and display entries
# as hyperlinks, making them clickable.
# Long views show the Git status for files and directories and a custom time style (mm-dd-yy hh:mm) (24-hour clock). ***
# Display extended details, group owner, and number of hard links
alias e='eza --icons=auto --group-directories-first --hyperlink -lgH --git --git-repos --time-style='\''+%m-%d-%y %H:%M'\'''
# Display extended details, group owner, number of hard links, and hidden (dot) files
alias ea='eza --icons=auto --group-directories-first --hyperlink -a -lgH --git --git-repos --time-style='\''+%m-%d-%y %H:%M'\'''
# Display entries as a grid
alias eg='eza --icons=auto --group-directories-first --hyperlink'
# Display entries as a grid and hidden (dot) files
alias ega='eza --icons=auto --group-directories-first --hyperlink -a'

# *** bat ***
alias b='bat'
# Highlight "--help" messages
alias bhelp='bat --plain --language=help'

# *** Git ***
alias glg='git lg'                       # 'lg' is a heavily customized 'log' alias in a '.gitconfig' file
alias gst='git status'                   # Show the working tree status
alias ga='git add .'                     # Add all changes to the commit
alias gr='git remote'                    # List remote repositories
alias gb='git branch'                    # List branches
alias grts='git restore --staged .'      # Unstage all staged files
alias gm='git commit -m'                 # Add a commit with a message
alias gma='git commit --amend --no-edit' # Update the most recent commit without changing the commit message
alias gp='git push'                      # Push to remote
alias gpf='git push -f'                  # Force push to remote
alias gcl='git clone'                    # Clone a repository

# *** Neovim ***
alias n='nvim'
# Enable diff mode to show the differences between 2-8 files
alias nd='nvim -d'

# *** pacman (Arch Linux) ***
alias pmu="sudo pacman -Syu"                       # Fully update an Arch Linux system
alias pms="sudo pacman -S"                         # Install an Arch Linux package
alias pmr="sudo pacman -Rs"                        # Remove an Arch Linux package and its unneeded dependencies
alias pmc="sudo pacman -Qdtq | sudo pacman -Rns -" # Remove unused packages (orphans)

# *** makepkg (Arch Linux) ***
# Build the package and install needed dependencies, install the package file,
# clean up leftover files/directories, and remove make dependencies
alias mpkg='makepkg -sicr'

# *** yt-dlp ***
alias ytd='yt-dlp --cookies-from-browser brave'
alias ytd-dt='yt-dlp --cookies-from-browser brave --write-description --write-thumbnail'
# Download as an audio file ONLY that contains embedded metadata and an embedded thumbnail
alias ytd-a='yt-dlp --cookies-from-browser brave -x --embed-metadata --embed-thumbnail'
# Same as 'ytd-a' but with the description and thumbnail also downloaded as separate files
alias ytd-adt='yt-dlp --cookies-from-browser brave -x --embed-metadata --embed-thumbnail --write-description --write-thumbnail'
# Download in parallel using aria2
alias ytd-a2c='yt-dlp --cookies-from-browser brave --downloader aria2c --downloader-args aria2c:'\''-c -x 16 -s 16 -k 1M'\'''

# *** gallery-dl ***
# Download to the current directory
alias gld='gallery-dl -D . --user-agent browser --cookies-from-browser brave'
# Same as 'gld' but additionally download metadata
alias gldm='gallery-dl -D . --write-metadata --user-agent browser --cookies-from-browser brave'
# Download a Pixiv ugoira as a WebM file
alias gldu='gallery-dl -D . --user-agent browser --cookies-from-browser brave --ugoira webm'

# *** kitty ***
# Install kitty (if not installed), otherwise update kitty to the latest version
alias kup='curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin'
alias icat="kitten icat"  # Display images in the terminal
alias kdiff="kitten diff" # Fast side-by-side diff tool w/ syntax highlighting & images

# *** fastfetch ***
alias ff='fastfetch'

# *** ouch ***
alias ouchc='ouch compress'   # Compress files (ouchc <input files> <output file>)
alias ouchd='ouch decompress' # Decompress files (ouchd <compressed file>)
alias ouchl='ouch list -t'    # List contents of an archive in tree format (ouchl <compressed file>)

# *** chezmoi ***
alias chc='z ~/.local/share/chezmoi' # Move to the source directory (uses zoxide)
alias cha='chezmoi add'              # Add a file, directory, or symlink to the source state
alias chr='chezmoi re-add'           # Re-add modified files
alias chd='chezmoi diff'             # Print diff between the target and destination state
alias chu='chezmoi update'           # Pull and apply any changes

# *** trash-cli ***
alias trp='trash-put'     # Trash files and directories
alias tre='trash-empty'   # Empty the trashcan(s)
alias trl='trash-list'    # List trashed files
alias trr='trash-restore' # Restore a trashed file
alias trrm='trash-rm'     # Remove individual files from the trashcan

# *** MPI ***
# Compile a C MPI file w/ debugging information, all warnings on, and a specified
# executable filename
alias mpic='mpicc -g -Wall -o' # mpic <executable> <source file>

# *** OpenMP ***
# Compile a C OpenMP file w/ debugging information, all warnings on, and a specified
# executable filename
alias opmp='gcc -g -Wall -fopenmp -o' # openmp <executable> <source file>

# *** Make ***
alias makec='make clean'      # Remove *.o files, but leave executable
alias makei='make immaculate' # Remove all files that can be reconstructed through "make"

# *** fzf ***
alias f='fzf'

# *** Python ***
alias py='python'

PS1='[\u@\h \W]\$ '

# Environment variables
export EDITOR="nvim"
# Override the default diff program to Neovim with diff mode enabled
export DIFFPROG="nvim -d"
# Run fzf with multi-select enabled (Tab), a height of 50%, a reversed layout (top to bottom),
# a border with sharp corners, a custom pointer, custom keybinds for preview page down (Ctrl+f) and up (Ctrl+b),
# a preview window executing the following script: https://github.com/junegunn/fzf/blob/master/bin/fzf-preview.sh
# (NOTE: Download and place the fzf-preview.sh file in a directory in your $PATH),
# sharp corners for the preview window border, and a OneDarkPro inspired color scheme
export FZF_DEFAULT_OPTS="
  -m
  --height 50%
  --layout reverse
  --border sharp
  --pointer='->'
  --bind='ctrl-f:preview-page-down,ctrl-b:preview-page-up'
  --preview='fzf-preview.sh {}'
  --preview-window='border-sharp'
  --color='
    fg:#abb2bf fg+:#61afef
    bg:#282c34 bg+:#4f5666
    hl:#d19a66 hl+:#d19a66
    pointer:#e5c07b marker:#61afef
    header:#98c379
    spinner:#c678dd info:#c678dd separator:#98c379
    prompt:#98c379 query:#abb2bf
    border:#abb2bf preview-border:#61afef
    scrollbar:#abb2bf preview-scrollbar:#abb2bf
  '
"
export PATH="${PATH}:~/scripts"

# Yazi shell wrapper to change the cwd when exiting yazi (use yy instead of yazi to start)
function yy() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# *** Git ***

# Add all changes to a commit and add a commit with a message
# Usage: gam "commit message"
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga' and 'gm'
gam() {
  ga && gm "$1"
}

# Add all changes to a commit, add a commit with a message, and push to remote
# Usage: gamp "commit message"
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga', 'gm', and 'gp'
gamp() {
  gam "$@" && gp
}

# Add all changes to a commit and update the most recent commit without changing its message
# Usage: gama
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga' and 'gma'
gama() {
  ga && gma
}

# Add all changes to a commit, update the most recent commit without changing its message, and force push to remote
# Usage: gamap
# NOTE: REQUIRES the following Git aliases that are defined above - 'ga', 'gma', and 'gpf'
gamap() {
  gama && gpf
}

# *** pacman (Arch Linux) ***

# View an installed package
# Usage: pmq package
# NOTE: 'pmq' uses ripgrep (rg)
pmq() {
  pacman -Q | rg "$1"
}

# View an explicitly installed package
# Usage: pmqe package
# NOTE: 'pmqe' uses ripgrep (rg)
pmqe() {
  pacman -Qe | rg "$1"
}

# *** bat ***
# Highlight "--help" messages
# Usage: help cd
# NOTE: REQUIRES the 'bhelp' alias defined above
help() {
  "$@" --help 2>&1 | bhelp
}

# *** base64 ***
# Decode base64 data and output the result to the terminal
# Usage: b64 base64string
b64() {
  base64 -d <<<"$1" && echo
}

# *** base32 ***
# Decode base32 data and output the result to the terminal
# Usage: b32 base32string
b32() {
  base32 -d <<<"$1" && echo
}

# Enable fzf shell integration (KEEP AT THE END OF THIS CONFIG FILE)
# CTRL-R: Paste the selected command from history onto the command-line
# CTRL-T: Paste the selected files and directories onto the command-line
# ALT-C: cd into the selected directory
eval "$(fzf --bash)"
# Replace "man" with "batman", which reads man pages using "bat" as the manual page formatter
eval "$(batman --export-env)"
# Allow starship usage (KEEP AT THE END OF THIS CONFIG FILE)
eval "$(starship init bash)"
# Allow zoxide usage (KEEP AT THE END OF THIS CONFIG FILE)
eval "$(zoxide init bash)"
